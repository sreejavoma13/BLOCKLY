openapi: 3.0.0
info:
  title: Blockly API
  version: 1.0.0
  description: API for user authentication, page management, sharing, and user profiles.

servers:
  - url: http://localhost:5000/api
    description: Local server

tags:
  - name: Auth
    description: User signup and login
  - name: Check
    description: Check user existence
  - name: Pages
    description: CRUD operations on pages
  - name: CoPages
    description: Collaborative pages APIs
  - name: Share
    description: Sharing pages with others
  - name: User
    description: User profile APIs

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SignupRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserResponse:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string

    PageRequest:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
        content:
          type: string
        parentId:
          type: string
          nullable: true

    PageResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        userId:
          type: string

    ShareLinksResponse:
      type: object
      properties:
        viewLink:
          type: string
          format: uri
        editLink:
          type: string
          format: uri

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: User Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: User created successfully
        400:
          description: Bad request
        500:
          description: Server error

  /auth/login:
    post:
      tags: [Auth]
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials
        500:
          description: Server error

  /check-user:
    post:
      tags: [Check]
      summary: Check if user exists and verify password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: User exists and password matches
        404:
          description: User not found
        401:
          description: Invalid credentials
        500:
          description: Server error

  /pages:
    post:
      tags: [Pages]
      summary: Create a new page
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRequest'
      responses:
        201:
          description: Page created successfully
        500:
          description: Server error

  /pages/{userId}:
    get:
      tags: [Pages]
      summary: Get all pages for a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageResponse'
        500:
          description: Server error

  /pages/fav/{userId}:
    get:
      tags: [Pages]
      summary: Get all favorite pages for a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of favorite pages
        500:
          description: Server error

  /pages/trash/{userId}/{pageId}:
    patch:
      tags: [Pages]
      summary: Move a page to trash (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Page moved to trash
        500:
          description: Server error

  /pages/{userId}/{pageId}:
    delete:
      tags: [Pages]
      summary: Permanently delete a page
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Page permanently deleted
        500:
          description: Server error

  /pages/trash/{userId}:
    delete:
      tags: [Pages]
      summary: Empty all pages in trash
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Trash emptied successfully
        500:
          description: Server error

  /share/{pageId}:
    post:
      tags: [Share]
      summary: Generate share links for a page
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Share links generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareLinksResponse'
        500:
          description: Failed to generate links

  /user/profile:
    get:
      tags: [User]
      summary: Get logged-in user's profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User not found
        500:
          description: Server error

  /copages/pages/save:
    post:
      tags: [CoPages]
      summary: Save or update a collaborative page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRequest'
      responses:
        201:
          description: Page saved or updated
        500:
          description: Server error

  /copages/pages/{email}:
    get:
      tags: [CoPages]
      summary: Get all collaborative pages for a user
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: List of collaborative pages
        500:
          description: Server error

  /copages/pages/{email}/{pageId}:
    get:
      tags: [CoPages]
      summary: Get a specific collaborative page by ID
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Page details
        404:
          description: Page not found
        500:
          description: Server error
